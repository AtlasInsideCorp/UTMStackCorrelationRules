# Rule version v1.0.1

- name: "Incoming Execution via WinRM Remote Shell"
  severity: "Medium"
  description: "Identifies remote execution via Windows Remote Management (WinRM) remote shell on a target host. This could be an
                indication of lateral movement."
  solution: "Isolate the involved host to prevent further post-compromise behavior.
      If the triage identified malware, search the environment for additional compromised hosts.
      Implement temporary network rules, procedures, and segmentation to contain the malware.
      Stop suspicious processes. Immediately block the identified indicators of compromise (IoCs).
      Inspect the affected systems for additional malware backdoors like reverse shells, reverse proxies, or droppers that
      attackers could use to reinfect the system. Remove and block malicious artifacts identified during triage.
      Review the privileges needed to write to the network share and restrict write access as needed.
      Run a full antimalware scan. This may reveal additional artifacts left in the system, persistence mechanisms, and malware components.
      Determine the initial vector abused by the attacker and take action to prevent reinfection through the same vector."
  category: "Lateral Movement"
  tactic: "Remote Services"
  reference:
    - "https://attack.mitre.org/tactics/TA0008/"
    - "https://attack.mitre.org/techniques/T1021/"
  frequency: 60
  cache: 
    - allOf:
        - field: "logx.wineventlog.process.pid"
          operator: "=="
          value: "4"
        - field: "logx.wineventlog.network.direction"
          operator: "regexp"
          value: "(incoming|ingress)"
        - field: "logx.wineventlog.destination.port"
          operator: "in"
          value: "5985,5986"
        - field: "logx.wineventlog.network.protocol"
          operator: "contain"
          value: "http"
        - field: "logx.wineventlog.source.ips"
          operator: "not in"
          value: "127.0.0.1,::1"
      minCount: 1
      timeLapse: 30
      save:
        - field: "logx.wineventlog.host.id"
          alias: "HostID"
    - allOf:
        - field: "logx.wineventlog.event.type"
          operator: "=="
          value: "start"
        - field: "logx.wineventlog.process.parent.name"
          operator: "contain"
          value: "winrshost.exe"
        - field: "logx.wineventlog.process.name"
          operator: "not contain"
          value: "conhost.exe"
        - field: "logx.wineventlog.host.id"
          operator: "=="
          value: "{{.HostID}}"
      minCount: 1
      timeLapse: 60
      save:
        - field: "logx.wineventlog.event_data.SubjectUserName"
          alias: "SourceUser"
        - field: "logx.wineventlog.host.name"
          alias: "SourceHost"
        - field: "logx.wineventlog.event_data.SourceAddress"
          alias: "SourceIP"
        - field: "logx.wineventlog.event_data.SourcePort"
          alias: "SourcePort"
        - field: "logx.wineventlog.event_data.TargetUserName"
          alias: "DestinationUser"
        - field: "logx.wineventlog.event_data.DestAddress"
          alias: "DestinationIP"
        - field: "logx.wineventlog.event_data.DestPort"
          alias: "DestinationPort"