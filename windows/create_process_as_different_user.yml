# Rule version v1.0.0

- name: "Process Creation via Secondary Logon"
  severity: "Medium"
  description: "Identifies process creation with alternate credentials. Adversaries may create a new process with a different token to
                escalate privileges and bypass access controls."
  solution: "Isolate the involved host to prevent further post-compromise behavior.
      Determine the initial vector abused by the attacker and take action to prevent reinfection through the same vector.
      If the malicious file was delivered via phishing:
      Block the email sender from sending future emails. Block the malicious web pages.
      Remove emails from the sender from mailboxes. Consider improvements to the security awareness program.
      Run a full antimalware scan. This may reveal additional artifacts left in the system, persistence mechanisms, and malware components."
  category: "Privilege Escalation"
  tactic: "Make and Impersonate Token"
  reference:
    - "https://attack.mitre.org/tactics/TA0004/"
    - "https://attack.mitre.org/techniques/T1134/003/"
  frequency: 60
  cache: 
    - allOf:
        - field: "logx.wineventlog.event_data.Outcome"
          operator: "regexp"
          value: "(SUCCESS|[Ss]uccess)"
        - field: "logx.wineventlog.user.identifier"
          operator: "contain"
          value: "S-1-5-21-"
        - field: "logx.wineventlog.event_data.ProcessName"
          operator: "contain"
          value: "svchost.exe"
        - field: "logx.wineventlog.event_data.SourceAddress"
          operator: "=="
          value: "::1"
        - field: "logx.wineventlog.event_data.LogonProcessName"
          operator: "contain"
          value: "seclogo"
      oneOf:
        - field: "logx.wineventlog.event_data.Description"
          operator: "contain"
          value: "logged-in"
        - field: "logx.wineventlog.event_data.StatusDescription"
          operator: "contain"
          value: "logged-in"
      minCount: 1
      timeLapse: 60
      save:
        - field: "logx.wineventlog.event_data.TargetLogonId"
          alias: "TargetLogonID"
        - field: "logx.wineventlog.host.id"
          alias: "HostID"
    - allOf:
        - field: "logx.wineventlog.event_data.TargetLogonId"
          operator: "=="
          value: "{{.TargetLogonID}}"
        - field: "logx.wineventlog.host.id"
          operator: "=="
          value: "{{.HostID}}"
      minCount: 1
      timeLapse: 60
      save:
        - field: "logx.wineventlog.event_data.SubjectUserName"
          alias: "SourceUser"
        - field: "logx.wineventlog.host.name"
          alias: "SourceHost"
        - field: "logx.wineventlog.event_data.SourceAddress"
          alias: "SourceIP"
        - field: "logx.wineventlog.event_data.SourcePort"
          alias: "SourcePort"
        - field: "logx.wineventlog.event_data.TargetUserName"
          alias: "DestinationUser"
        - field: "logx.wineventlog.event_data.DestAddress"
          alias: "DestinationIP"
        - field: "logx.wineventlog.event_data.DestPort"
          alias: "DestinationPort"